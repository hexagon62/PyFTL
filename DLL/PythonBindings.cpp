#include "GameState/CleanReader.hpp"

#include <pybind11/embed.h>
#include <pybind11/stl.h>
#include <pybind11/chrono.h>
namespace py = pybind11;

PYBIND11_EMBEDDED_MODULE(ftl, module)
{
	module
		.def("state", &Reader::getState, py::return_value_policy::reference)
		.def("get_poll_delay", &Reader::getPollDelay, py::return_value_policy::reference)
		.def("set_poll_delay", &Reader::setPollDelay, py::return_value_policy::reference)
		.def("use_seperate_polling_thread", &Reader::setSeperateThread, py::arg("on") = true)
		.def("is_polling_thread_separated", &Reader::usingSeperateThread)
		.def("reload", &Reader::reload)
		.def("quit", &Reader::quit)
		;

	py::class_<ValueScopeGuard<bool>>(module, "ScopedBool", "A boolean that will automatically reset its value after leaving the scope it's defined in")
		.def(py::init<bool&, bool, bool>())
		.def("__enter__", &ValueScopeGuard<bool>::acquire)
		.def("__exit__", &ValueScopeGuard<bool>::release)
		.def("acquire", &ValueScopeGuard<bool>::acquire, "Sets the locked value")
		.def("release", &ValueScopeGuard<bool>::release, "Sets the unlocked value")
		.def("locked", &ValueScopeGuard<bool>::locked, "Checks if using the locked value")
		;

	py::enum_<Key>(module, "Key", "A keyboard key")
		.value("Unknown", Key::Unknown)
		.value("Backspace", Key::Backspace)
		.value("Tab", Key::Tab)
		.value("Clear", Key::Clear)
		.value("Enter", Key::Return)
		.value("Pause", Key::Pause)
		.value("Escape", Key::Escape)
		.value("Space", Key::Space)
		.value("!", Key::Exclaim)
		.value("\"", Key::DoubleQuote)
		.value("#", Key::Hash)
		.value("$", Key::Dollar)
		.value("&", Key::Ampersand)
		.value("'", Key::Quote)
		.value("(", Key::LeftParenthesis)
		.value(")", Key::RightParenthesis)
		.value("*", Key::Asterisk)
		.value("+", Key::Plus)
		.value(",", Key::Comma)
		.value("-", Key::Minus)
		.value(".", Key::Period)
		.value("/", Key::Slash)
		.value("0", Key::Num0)
		.value("1", Key::Num1)
		.value("2", Key::Num2)
		.value("3", Key::Num3)
		.value("4", Key::Num4)
		.value("5", Key::Num5)
		.value("6", Key::Num6)
		.value("7", Key::Num7)
		.value("8", Key::Num8)
		.value("9", Key::Num9)
		.value(":", Key::Colon)
		.value(";", Key::Semicolon)
		.value("<", Key::Less)
		.value("=", Key::Equals)
		.value(">", Key::Greater)
		.value("?", Key::Question)
		.value("@", Key::At)
		.value("[", Key::LeftBracket)
		.value("\\", Key::BackSlash)
		.value("]", Key::RightBracket)
		.value("^", Key::Caret)
		.value("_", Key::Underscore)
		.value("`", Key::Backquote)
		.value("A", Key::A)
		.value("B", Key::B)
		.value("C", Key::C)
		.value("D", Key::D)
		.value("E", Key::E)
		.value("F", Key::F)
		.value("G", Key::G)
		.value("H", Key::H)
		.value("I", Key::I)
		.value("J", Key::J)
		.value("K", Key::K)
		.value("L", Key::L)
		.value("M", Key::M)
		.value("N", Key::N)
		.value("O", Key::O)
		.value("P", Key::P)
		.value("Q", Key::Q)
		.value("R", Key::R)
		.value("S", Key::S)
		.value("T", Key::T)
		.value("U", Key::U)
		.value("V", Key::V)
		.value("W", Key::W)
		.value("X", Key::X)
		.value("Y", Key::Y)
		.value("Z", Key::Z)
		.value("Delete", Key::Delete)
		.value("Pad0", Key::Numpad0)
		.value("Pad1", Key::Numpad1)
		.value("Pad2", Key::Numpad2)
		.value("Pad3", Key::Numpad3)
		.value("Pad4", Key::Numpad4)
		.value("Pad5", Key::Numpad5)
		.value("Pad6", Key::Numpad6)
		.value("Pad7", Key::Numpad7)
		.value("Pad8", Key::Numpad8)
		.value("Pad9", Key::Numpad9)
		.value("Pad.", Key::NumpadPeriod)
		.value("Pad/", Key::NumpadDivide)
		.value("Pad*", Key::NumpadMultiply)
		.value("Pad-", Key::NumpadMinus)
		.value("Pad+", Key::NumpadPlus)
		.value("PadEnter", Key::NumpadEnter)
		.value("Up", Key::Up)
		.value("Down", Key::Down)
		.value("Right", Key::Right)
		.value("Left", Key::Left)
		.value("Insert", Key::Insert)
		.value("Home", Key::Home)
		.value("End", Key::End)
		.value("PageUp", Key::PageUp)
		.value("PageDown", Key::PageDown)
		.value("F1", Key::F1)
		.value("F2", Key::F2)
		.value("F3", Key::F3)
		.value("F4", Key::F4)
		.value("F5", Key::F5)
		.value("F6", Key::F6)
		.value("F7", Key::F7)
		.value("F8", Key::F8)
		.value("F9", Key::F9)
		.value("F10", Key::F10)
		.value("F11", Key::F11)
		.value("F12", Key::F12)
		.value("F13", Key::F13)
		.value("F14", Key::F14)
		.value("F15", Key::F15)
		.value("NumLock", Key::NumLock)
		.value("CapsLock", Key::CapsLock)
		.value("ScrollLock", Key::ScrollLock)
		;

	py::enum_<HackLevel>(module, "HackLevel", "Used to store the state of something being hacked")
		.value("Invalid", HackLevel::Invalid, "An invalid state")
		.value("None", HackLevel::None, "Hacking drone is depowered or not attached")
		.value("Passive", HackLevel::Passive, "Hacking drone is attached, but hacking is not activated")
		.value("Active", HackLevel::Active, "Hacking drone is attached and hacking is activated")
		;

	py::class_<Point<int>>(module, "PointInt", "A point encoded in integers")
		.def(py::init<>())
		.def(py::init<const int&, const int&>())
		.def(py::init<const Point<int>&>())
		.def_readonly("x", &Point<int>::x)
		.def_readonly("y", &Point<int>::y)
		.def("__add__", &Point<int>::operator+)
		.def("__sub__", &Point<int>::operator-)
		.def("__mul__", &Point<int>::operator*)
		.def("__truediv__", &Point<int>::operator/)
		;

	py::class_<Point<float>>(module, "PointFloat", "A point encoded in floating point numbers")
		.def(py::init<>())
		.def(py::init<const float&, const float&>())
		.def(py::init<const Point<float>&>())
		.def_readonly("x", &Point<float>::x)
		.def_readonly("y", &Point<float>::y)
		.def("__add__", &Point<float>::operator+)
		.def("__sub__", &Point<float>::operator-)
		.def("__mul__", &Point<float>::operator*)
		.def("__truediv__", &Point<float>::operator/)
		;

	py::class_<Rect<int>>(module, "RectInt", "A rectangle encoded in integers")
		.def(py::init<>())
		.def(py::init<const int&, const int&, const int&, const int&>())
		.def(py::init<const Rect<int>&>())
		.def_readonly("x", &Rect<int>::x)
		.def_readonly("y", &Rect<int>::y)
		.def_readonly("w", &Rect<int>::w)
		.def_readonly("h", &Rect<int>::h)
		.def("contains", py::overload_cast<const Point<int>&>(&Rect<int>::contains<int>, py::const_), "Check if the rectangle contains the point")
		.def("contains", py::overload_cast<const Point<float>&>(&Rect<int>::contains<float>, py::const_), "Check if the rectangle contains the point")
		.def("center", &Rect<int>::center)
		;

	py::class_<Rect<float>>(module, "RectFloat", "A rectangle encoded in floating point numbers")
		.def(py::init<>())
		.def(py::init<const float&, const float&, const float&, const float&>())
		.def(py::init<const Rect<float>&>())
		.def_readonly("x", &Rect<float>::x, "The x position of the upper left corner")
		.def_readonly("y", &Rect<float>::y, "The y position of the upper right corner")
		.def_readonly("w", &Rect<float>::w, "The width")
		.def_readonly("h", &Rect<float>::h, "The height")
		.def("contains", py::overload_cast<const Point<int>&>(&Rect<float>::contains<int>, py::const_), "Check if the rectangle contains the point")
		.def("contains", py::overload_cast<const Point<float>&>(&Rect<float>::contains<float>, py::const_), "Check if the rectangle contains the point")
		.def("center", &Rect<float>::center, "Get the center of the rectangle")
		;

	py::class_<Ellipse<int>>(module, "EllipseInt", "An ellipse encoded in integers")
		.def(py::init<>())
		.def(py::init<const Point<int>&, const int&, const int&>())
		.def(py::init<const Ellipse<int>&>())
		.def_readonly("center", &Ellipse<int>::center, "The center")
		.def_readonly("a", &Ellipse<int>::a, "The x-axis")
		.def_readonly("b", &Ellipse<int>::b, "The y-axis")
		.def("contains", py::overload_cast<const Point<int>&>(&Ellipse<int>::contains<int>, py::const_), "Check if the ellipse contains the point")
		.def("contains", py::overload_cast<const Point<float>&>(&Ellipse<int>::contains<float>, py::const_), "Check if the ellipse contains the point")
		;

	py::class_<Ellipse<float>>(module, "EllipseFloat", "An ellipse encoded in floating point numbers")
		.def(py::init<>())
		.def(py::init<const Point<float>&, const float&, const float&>())
		.def(py::init<const Ellipse<float>&>())
		.def_readonly("center", &Ellipse<float>::center, "The center")
		.def_readonly("a", &Ellipse<float>::a, "The x-axis")
		.def_readonly("b", &Ellipse<float>::b, "The y-axis")
		.def("contains", py::overload_cast<const Point<int>&>(&Ellipse<float>::contains<int>, py::const_), "Check if the ellipse contains the point")
		.def("contains", py::overload_cast<const Point<float>&>(&Ellipse<float>::contains<float>, py::const_), "Check if the ellipse contains the point")
		;

	py::enum_<SystemType>(module, "SystemType", "The type of a system")
		.value("None", SystemType::None)
		.value("Shields", SystemType::Shields)
		.value("Engines", SystemType::Engines)
		.value("Oxygen", SystemType::Oxygen)
		.value("Weapons", SystemType::Weapons)
		.value("Drones", SystemType::Drones)
		.value("Medbay", SystemType::Medbay)
		.value("Piloting", SystemType::Piloting)
		.value("Sensors", SystemType::Sensors)
		.value("Doors", SystemType::Doors)
		.value("Teleporter", SystemType::Teleporter)
		.value("Cloaking", SystemType::Cloaking)
		.value("Artillery", SystemType::Artillery)
		.value("Battery", SystemType::battery)
		.value("Clonebay", SystemType::Clonebay)
		.value("MindControl", SystemType::MindControl)
		.value("Hacking", SystemType::Hacking)
		;

	py::class_<Blueprint>(module, "Blueprint", "A generic blueprint")
		.def_readonly("name", &Blueprint::name, "Internal name of the blueprint")
		.def_readonly("cost", &Blueprint::cost, "Cost of the item")
		.def_readonly("rarity", &Blueprint::rarity, "Rarity of the item")
		.def_readonly("base_rarity", &Blueprint::baseRarity, "Base rarity of the item")
		;

	py::class_<Augment, Blueprint>(module, "Augment", "An augmentation")
		.def_readonly("value", &Augment::value, "The value the game uses to determine the intensity of the effect")
		.def_readonly("stacking", &Augment::stacking, "Whether or not having duplicates of the augmenet does anything")
		;

	py::enum_<WeaponType>(module, "WeaponType", "The type of weapon")
		.value("Invalid", WeaponType::Invalid)
		.value("Laser", WeaponType::Laser)
		.value("Beam", WeaponType::Beam)
		.value("Burst", WeaponType::Burst)
		.value("Missiles", WeaponType::Missiles)
		.value("Bomb", WeaponType::Bomb)
		;

	py::class_<BoostPower>(module, "BoostPower", "The definition of a weapon's boost")
		.def_readonly("type", &BoostPower::type, "The type of the boost power")
		.def_readonly("amount", &BoostPower::amount, "The value used for the boost")
		.def_readonly("count", &BoostPower::count, "The amount of times boosted")
		;

	py::class_<Damage>(module, "Damage", "Damage that a weapon's projectile or other source will do")
		.def_readonly_static("HARDCODED_CREW_DAMAGE_FACTOR", &Damage::HARDCODED_CREW_DAMAGE_FACTOR, "What the damage to a crewmember must be a multiple of")
		.def_readonly("normal", &Damage::normal, "Normal damage - 1 point is also 1 system damage and 15 crew damage")
		.def_readonly("ion", &Damage::ion, "Ion damage")
		.def_readonly("system", &Damage::system, "System damage")
		.def_readonly("crew", &Damage::crew, "Crew damage")
		.def_readonly("fire_chance", &Damage::fireChance, "Chance of a fire")
		.def_readonly("breach_chance", &Damage::breachChance, "Chance of a breach")
		.def_readonly("stun_chance", &Damage::stunChance, "Chance of stunning a crew member")
		.def_readonly("pierce", &Damage::pierce, "Level of shields pierced")
		.def_readonly("stun_time", &Damage::stunTime, "Time it will stun a crew member (guaranteed, doesn't involve stun_chance)")
		.def_readonly("hull_bonus", &Damage::hullBonus, "If the damage is doubled for empty rooms")
		.def_readonly("friendly_fire", &Damage::friendlyFire, "If the weapon can damage your own crew")
		;

	py::class_<WeaponBlueprint, Blueprint>(module, "WeaponBlueprint", "A weapon blueprint")
		.def_readonly("damage", &WeaponBlueprint::damage, "The damage each projectile does")
		.def_readonly("type", &WeaponBlueprint::type, "The type of the weapon")
		.def_readonly("shots", &WeaponBlueprint::shots, "The number of shots the weapon fires")
		.def_readonly("missiles", &WeaponBlueprint::missiles, "The number of missiles used per shot")
		.def_readonly("cooldown", &WeaponBlueprint::cooldown, "The default time the weapon must wait to fire again")
		.def_readonly("power", &WeaponBlueprint::power, "The amount of power the weapon requires")
		.def_readonly("beam_length", &WeaponBlueprint::beamLength, "The length of the beam in pixels when the game is running at a resolution of 1280x720")
		.def_readonly("burst_radius", &WeaponBlueprint::burstRadius, "The radius of a burst attack (i.e. from flak weapons) when the game is running at a resolution of 1280x720")
		.def_readonly("charge_levels", &WeaponBlueprint::chargeLevels, "The amount of times the weapon can charge at once (ex: charge laser 2)")
		.def_readonly("boost", &WeaponBlueprint::boost, "The boost the weapon gets after it fires")
		.def_readonly("projectiles_fake", &WeaponBlueprint::projectilesFake, "How many fake projectiles the weapon fires in a shot")
		.def_readonly("projectiles", &WeaponBlueprint::projectiles, "The number of real projectiles the weapon fires in a shot")
		.def_readonly("projectiles_total", &WeaponBlueprint::projectilesTotal, "The number of projectiles the weapon fires in a volley, not considering multiple charges")
		;

	py::class_<Weapon>(module, "Weapon", "A weapon")
		.def_readonly("cooldown", &Weapon::cooldown, "The time the weapon must wait to fire again, factoring in augments and manning")
		.def_readonly("blueprint", &Weapon::blueprint, "The blueprint of the weapon")
		.def_readonly("auto_fire", &Weapon::autoFire, "Whether or not the weapon is set to auto-fire")
		.def_readonly("fire_when_ready", &Weapon::fireWhenReady, "Whether or not the weapon will fire once off cooldown")
		.def_readonly("powered", &Weapon::powered, "If the weapon is powered")
		.def_readonly("artillery", &Weapon::artillery, "If the weapon is artillery")
		.def_readonly("targeting_player", &Weapon::targetingPlayer, "If the weapon is targeting the player")
		.def_readonly("firing_angle", &Weapon::firingAngle, "The angle projectiles will leave the weapon?")
		.def_readonly("entry_angle", &Weapon::entryAngle, "The angle projectiles will enter the enemy's space at")
		.def_readonly("mount", &Weapon::mount, "The weapon mount")
		.def_readonly("zoltan_power", &Weapon::zoltanPower, "The amount of power from Zoltan crew")
		.def_readonly("hack_level", &Weapon::hackLevel, "The hacking status")
		.def_readonly("boost", &Weapon::boost, "The boost status")
		.def_readonly("charge", &Weapon::charge, "How many charges the weapon has")
		.def_readonly("shot_timer", &Weapon::shotTimer, "Timer for each firing animation")
		.def_readonly("target_points", &Weapon::targetPoints, "List of points the projectiles are aimed at")
		;

	py::enum_<DroneType>(module, "DroneType", "The type of a drone")
		.value("Invalid", DroneType::Invalid)
		.value("Combat", DroneType::Combat)
		.value("Defense", DroneType::Defense)
		.value("AntiBoarder", DroneType::AntiBoarder)
		.value("Boarder", DroneType::Boarder)
		.value("HullRepair", DroneType::HullRepair)
		.value("SystemRepair", DroneType::SystemRepair)
		.value("Hacking", DroneType::Hacking)
		.value("Shield", DroneType::Shield)
		;

	py::class_<DroneBlueprint, Blueprint>(module, "DroneBlueprint", "Blueprint for drones")
		.def_readonly_static("HARDCODED_SHIELD_COOLDOWNS", &DroneBlueprint::HARDCODED_SHIELD_COOLDOWNS, "The time the super shield drone takes to add a new bubble, given the amount of bubbles you already have")
		.def_readonly("type", &DroneBlueprint::type, "The type of the drone")
		.def_readonly("power", &DroneBlueprint::power, "The amount of power the drone requires")
		.def_readonly("cooldown", &DroneBlueprint::cooldown, "The amount of time the drone must wait before firing again")
		.def_readonly("speed", &DroneBlueprint::speed, "The speed at which the drone moves")
		;

	py::class_<SpaceDroneMovementExtra>(module, "SpaceDroneMovementExtra", "Info for combat/hull repair drone movement")
		.def_readonly("destination_last", &SpaceDroneMovementExtra::destinationLast, "The last destination spot for the drone")
		.def_readonly("progress", &SpaceDroneMovementExtra::progress, "Progress towards the current destination")
		.def_readonly("heading", &SpaceDroneMovementExtra::heading, "The current heading of the drone")
		.def_readonly("heading_last", &SpaceDroneMovementExtra::headingLast, "The last heading of the drone")
		;

	py::class_<SpaceDroneInfo>(module, "SpaceDroneInfo", "Info for a drone that's in space")
		.def_readonly("player_space", &SpaceDroneInfo::playerSpace, "If the drone is in the player space")
		.def_readonly("player_space_is_destination", &SpaceDroneInfo::playerSpaceIsDestination, "If the drone is headed to the player space")
		.def_readonly("moving", &SpaceDroneInfo::moving, "If the drone is moving")
		.def_readonly("position", &SpaceDroneInfo::position, "The drone's position")
		.def_readonly("position_last", &SpaceDroneInfo::positionLast, "The drone's last position")
		.def_readonly("destination", &SpaceDroneInfo::destination, "The drone's destination position")
		.def_readonly("speed", &SpaceDroneInfo::speed, "The drone's speed")
		.def_readonly("pause", &SpaceDroneInfo::pause, "How long the drone has not been moving while active")
		.def_readonly("cooldown", &SpaceDroneInfo::cooldown, "The time the drone must wait to fire again")
		.def_readonly("angle", &SpaceDroneInfo::angle, "The drone's angle")
		.def_readonly("angle_desired", &SpaceDroneInfo::angleDesired, "The drone's desired angle")
		.def_readonly("angle_malfunction", &SpaceDroneInfo::angleMalfunction, "The angle the drone has if hacked/ioned")
		.def_readonly("ion_time", &SpaceDroneInfo::ionTime, "The time remaining the drone will be ioned for")
		.def_readonly("weapon", &SpaceDroneInfo::weapon, "The drone's weapon blueprint")
		.def_readonly("extra_movement", &SpaceDroneInfo::extraMovement, "Combat/hull repair drone movement info")
		;

	py::class_<Drone>(module, "Drone", "A drone")
		.def_readonly_static("HARDCODED_REBUILD_TIME", &Drone::HARDCODED_REBUILD_TIME, "How long you must wait to deploy a destroyed drone again")
		.def_readonly_static("HARDCODED_SAFE_MALFUNCTION_TIME", &Drone::HARDCODED_SAFE_MALFUNCTION_TIME, "How long before a drone can be destroyed by hacking/ion damage")
		.def_readonly("blueprint", &Drone::blueprint, "The drone's blueprint")
		.def_readonly("player", &Drone::player, "If the drone belongs to a player")
		.def_readonly("powered", &Drone::powered, "If the drone is powered")
		.def_readonly("dead", &Drone::dead, "If the drone is dead")
		.def_readonly("zoltan_power", &Drone::zoltanPower, "The amount of power from Zoltan crew")
		.def_readonly("hack_level", &Drone::hackLevel, "The hacking status")
		.def_readonly("hack_time", &Drone::hackTime, "The time hacked/ioned")
		.def_readonly("destroy_timer", &Drone::destroyTimer, "The amount of time left after destruction before the drone can be redeployed")
		.def_readonly("space", &Drone::space, "Info for if the drone is in space")
		;

	py::class_<Path>(module, "Path", "A crewmember's path; the doors are the nodes.")
		.def_readonly("start", &Path::start, "The start of the path")
		.def_readonly("finish", &Path::finish, "The end of the path")
		.def_readonly("doors", &Path::doors, "The doors on the path")
		.def_readonly("distance", &Path::distance, "The length of the path")
		;

	py::class_<CrewBlueprint, Blueprint>(module, "CrewBlueprint", "A crewmember's blueprint")
		.def_readonly("name", &CrewBlueprint::name, "The shortened name of the crewmember")
		.def_readonly("name_long", &CrewBlueprint::nameLong, "The full name of the crewmember")
		.def_readonly("species", &CrewBlueprint::species, "The species of the crewmember")
		.def_readonly("male", &CrewBlueprint::male, "If the crewmember is male")
		.def_readonly("skill_piloting", &CrewBlueprint::skillPiloting, "The crewmember's piloting skill")
		.def_readonly("skill_engines", &CrewBlueprint::skillEngines, "The crewmember's engine skill")
		.def_readonly("skill_shields", &CrewBlueprint::skillShields, "The crewmember's shields skill")
		.def_readonly("skill_weapons", &CrewBlueprint::skillWeapons, "The crewmember's weapons skill")
		.def_readonly("skill_repair", &CrewBlueprint::skillRepair, "The crewmember's repair skill")
		.def_readonly("skill_combat", &CrewBlueprint::skillCombat, "The crewmember's combat skill")
		;

	py::class_<Crew>(module, "Crew", "A crewmember")
		.def_readonly("ui_box", &Crew::uiBox, "The crewmember's box in the UI")
		.def_readonly("selection_state", &Crew::selectionState, "If/how the crew is selected")
		.def_readonly("blueprint", &Crew::blueprint, "The crewmember's blueprint")
		.def_readonly("position", &Crew::position, "The crewmember's position")
		.def_readonly("goal", &Crew::goal, "The crewmember's destination position")
		.def_readonly("health", &Crew::health, "The crewmember's health")
		.def_readonly("speed", &Crew::speed, "The crewmember's speed")
		.def_readonly("path", &Crew::path, "The crewmember's current path")
		.def_readonly("player", &Crew::player, "If the crewmember belongs to the player")
		.def_readonly("on_player_ship", &Crew::onPlayerShip, "If the crewmember is on the player's ship")
		.def_readonly("new_path", &Crew::newPath, "If the crewmember has changed paths")
		.def_readonly("suffocating", &Crew::suffocating, "If the crewmember has insufficient O2")
		.def_readonly("repairing", &Crew::repairing, "If the crewmember is repairing")
		.def_readonly("intruder", &Crew::intruder, "If the crewmember is an intruder on the ship they're on")
		.def_readonly("fighting", &Crew::fighting, "If the crewmember is fighting")
		.def_readonly("dead", &Crew::dead, "If the crewmember is dead")
		.def_readonly("manning", &Crew::manning, "If the crewmember is manning a system")
		.def_readonly("moving", &Crew::moving, "If the crewmember is moving")
		.def_readonly("on_fire", &Crew::onFire, "If the crewmember is on fire")
		.def_readonly("room", &Crew::room, "The room the crewmember is in")
		.def_readonly("slot", &Crew::slot, "The slot the crewmember is in")
		.def_readonly("manned_system", &Crew::mannedSystem, "The system the crewmember is manning")
		.def_readonly("room_goal", &Crew::roomGoal, "The room the crewmember wants to be in")
		.def_readonly("slot_goal", &Crew::slotGoal, "The slot the crewmember wants to be in")
		.def_readonly("room_saved", &Crew::roomSaved, "The room the crewmember's station is in")
		.def_readonly("slot_saved", &Crew::slotSaved, "The slot of the crewmember's station")
		.def_readonly("clone_queue_position", &Crew::cloneQueuePosition, "The position of the crewmember in the clone queue")
		.def_readonly("clone_death_progress", &Crew::cloneDeathProgress, "The progress of the crewmember's death in the clone bay")
		.def_readonly("ready_to_clone", &Crew::readyToClone, "If the crewmember can be cloned")
		.def_readonly("mind_controlled", &Crew::mindControlled, "If the crewmember is mind controlled")
		.def_readonly("mind_control_health_boost", &Crew::mindControlHealthBoost, "The health boost from mind control")
		.def_readonly("mind_control_damage_multiplier", &Crew::mindControlDamageMultiplier, "The damage boost from mind control")
		.def_readonly("stun_time", &Crew::stunTime, "The amount of time the crewmember is stunned for")
		.def_readonly("teleport_timer", &Crew::teleportTimer, "The amount of time the crewmember is frozen thanks to teleporting")
		.def_readonly("leaving", &Crew::leaving, "If the crewmember is leaving their ship")
		.def_readonly("arriving", &Crew::arriving, "If the crewmember is arriving at their ship")
		.def_readonly("teleporting", &Crew::teleporting, "If the crewmember is teleporting")
		.def_readonly("drone", &Crew::drone, "If the crewmember is a drone")
		;

	py::class_<Power>(module, "Power", "The power state of a system")
		.def_readonly("total", &Power::total, "Total power")
		.def_readonly("normal", &Power::normal, "Power from reactor")
		.def_readonly("zoltan", &Power::zoltan, "Power from Zoltan crew")
		.def_readonly("battery", &Power::battery, "Power from Backup battery")
		.def_readonly("cap", &Power::cap, "Power cap from event/environment")
		.def_readonly("ion_level", &Power::ionLevel, "The level of ionization")
		.def_readonly("ion_timer", &Power::ionTimer, "The time left to remove one level of ionization")
		.def_readonly("restore_to", &Power::restoreTo, "The power level to restore the system to once repaired/ionization wears off")
		;

	py::class_<SystemBlueprint, Blueprint>(module, "SystemBlueprint", "Blueprint with general info on a system")
		.def_readonly("power_start", &SystemBlueprint::powerStart, "The amount of power the system starts with")
		.def_readonly("power_max", &SystemBlueprint::powerMax, "The maximum power the system can have")
		.def_readonly("upgrade_costs", &SystemBlueprint::upgradeCosts, "The cost to upgrade the system at each level")
		;

	py::class_<System>(module, "System", "Generic system")
		.def_readonly("type", &System::type, "The type of the system")
		.def_readonly("blueprint", &System::blueprint, "The blueprint of the system")
		.def_readonly("room", &System::room, "The room the system is in")
		.def_readonly("power", &System::power, "The power state of the system")
		.def_readonly("health", &System::health, "The system's health")
		.def_readonly("level", &System::level, "The system's level")
		.def_readonly("manning_level", &System::manningLevel, "The level of whoever is manning the system; 0 if unmanned")
		.def_readonly("needs_manning", &System::needsManning, "If the system needs to be manned to function")
		.def_readonly("occupied", &System::occupied, "If the system's room is occupied, by a friendly crewmember")
		.def_readonly("on_fire", &System::onFire, "If the system is on fire")
		.def_readonly("breached", &System::breached, "If the system is breached")
		.def_readonly("boarders_attacking", &System::boardersAttacking, "If boarders are attacking the system")
		.def_readonly("damage_progress", &System::damageProgress, "The progress towards damaging 1 bar by boarders, fires, etc.")
		.def_readonly("repair_progress", &System::repairProgress, "The progress towards repairing 1 bar")
		;

	py::class_<ShieldSystem, System>(module, "ShieldSystem", "The shield system")
		.def_readonly("boundary", &ShieldSystem::boundary, "The ellipse defining the shield bubble")
		.def_readonly("bubbles", &ShieldSystem::bubbles, "The amount of bubbles the shields have up")
		.def_readonly("charge", &ShieldSystem::charge, "The progress towards charging the next bubble")
		;

	py::class_<EngineSystem, System>(module, "EngineSystem", "The engine system")
		.def_readonly_static("HARDCODED_EVASION_VALUES", &EngineSystem::HARDCODED_EVASION_VALUES, "The evasion value each level of engines provides")
		.def_readonly_static("HARDCODED_EVASION_SKILL_BOOST", &EngineSystem::HARDCODED_EVASION_SKILL_BOOST, "The evasion value each level of piloting skill provides")
		.def_readonly("boost_ftl", &EngineSystem::boostFTL, "If the engines are providing 3x FTL boost (usually if no fight is occuring and there's a hazard)")
		;

	py::class_<MedbaySystem, System>(module, "MedbaySystem", "The medbay system")
		.def_readonly("slot", &MedbaySystem::slot, "The slot that can't be occupied in the medbay, if applicable")
		;

	py::class_<ClonebaySystem, System>(module, "ClonebaySystem", "The clonebay system")
		.def_readonly_static("HARDCODED_DEATH_TIME", &ClonebaySystem::HARDCODED_DEATH_TIME, "The amount of time it takes a clone to die if the system is unpowered")
		.def_readonly("queue", &ClonebaySystem::queue, "The clone queue")
		.def_readonly("clone_timer", &ClonebaySystem::cloneTimer, "The time to create the next clone")
		.def_readonly("death_timer", &ClonebaySystem::deathTimer, "The time to kill the next clone")
		.def_readonly("slot", &ClonebaySystem::slot, "The slot that is taken by the clonebay, if applicable")
		;

	py::class_<OxygenSystem, System>(module, "OxygenSystem", "The oxygen system")
		;

	py::class_<TeleporterSystem, System>(module, "TeleporterSystem", "The teleporter system")
		.def_readonly("slots", &TeleporterSystem::slots, "The number of crew slots the teleporter has")
		.def_readonly("target_room", &TeleporterSystem::targetRoom, "The currently targeted room")
		.def_readonly("crew_present", &TeleporterSystem::crewPresent, "If crew are present in the teleporter room")
		.def_readonly("sending", &TeleporterSystem::sending, "If the teleporter is sending crew")
		.def_readonly("receiving", &TeleporterSystem::receiving, "If the teleporter is returning crew")
		;

	py::class_<CloakingSystem, System>(module, "CloakingSystem", "The cloaking system")
		.def_readonly_static("HARDCODED_EVASION_BONUS", &CloakingSystem::HARDCODED_EVASION_BONUS, "The evasion bonus provided by activated cloaking")
		.def_readonly("on", &CloakingSystem::on, "If cloaking is activated")
		.def_readonly("timer", &CloakingSystem::timer, "The time left before cloaking deactivates")
		;

	py::class_<ArtillerySystem, System>(module, "ArtillerySystem", "An artillery system")
		.def_readonly("weapon", &ArtillerySystem::weapon, "The weapon tied to the artillery system")
		;

	py::class_<MindControlSystem, System>(module, "MindControlSystem", "The mind control system")
		.def_readonly("on", &MindControlSystem::on, "If mind control is activated")
		.def_readonly("timer", &MindControlSystem::timer, "The time left before mind control deactivates")
		.def_readonly("target_room", &MindControlSystem::targetRoom, "The targeted room")
		.def_readonly("targeting_player_ship", &MindControlSystem::targetingPlayerShip, "If targeting the player ship")
		;

	py::class_<HackingDrone, Drone>(module, "HackingDrone", "A hacking drone")
		.def_readonly("start", &HackingDrone::start, "The drone's starting position")
		.def_readonly("goal", &HackingDrone::goal, "The drone's starting goal")
		.def_readonly("arrived", &HackingDrone::arrived, "If the drone has arrived")
		.def_readonly("set_up", &HackingDrone::setUp, "If the drone is set up")
		.def_readonly("room", &HackingDrone::room, "The drone's targeted room")
		;

	py::class_<HackingSystem, System>(module, "HackingSystem", "The hacking system")
		.def_readonly("on", &HackingSystem::on, "If hacking is activated")
		.def_readonly("timer", &HackingSystem::timer, "The time left before hacking deactivates")
		.def_readonly("target", &HackingSystem::target, "The targeted system")
		.def_readonly("queued", &HackingSystem::queued, "The system that is selected for targeting")
		.def_readonly("drone", &HackingSystem::drone, "The hacking drone")
		;

	py::class_<WeaponSystem, System>(module, "WeaponSystem", "The weapon system")
		.def_readonly("slot_count", &WeaponSystem::slotCount, "The number of slots the system has")
		.def_readonly("weapons", &WeaponSystem::weapons, "The weapons installed")
		.def_readonly("user_powered", &WeaponSystem::userPowered, "Which weapons are powered by the user")
		.def_readonly("repower", &WeaponSystem::repower, "Which weapons will need repowering upon repair/deionization")
		;

	py::class_<DroneSystem, System>(module, "DroneSystem")
		.def_readonly("slot_count", &DroneSystem::slotCount, "The number of slots the system has")
		.def_readonly("drones", &DroneSystem::drones, "The drones installed")
		.def_readonly("user_powered", &DroneSystem::userPowered, "Which drones are powered by the user")
		.def_readonly("repower", &DroneSystem::repower, "Which drones will need repowering upon repair/deionization")
		;

	py::class_<PilotingSystem, System>(module, "PilotingSystem", "The piloting system")
		.def_readonly_static("HARDCODED_EVASION_SKILL_BOOST", &PilotingSystem::HARDCODED_EVASION_SKILL_BOOST, "The evasion provided by piloting skills")
		;

	py::class_<SensorSystem, System>(module, "SensorSystem", "The sensor system")
		;

	py::class_<DoorSystem, System>(module, "DoorSystem", "The door system")
		;

	py::class_<BatterySystem, System>(module, "BatterySystem", "The backup battery system")
		.def_readonly("on", &BatterySystem::on, "If the battery is on")
		.def_readonly("timer", &BatterySystem::timer, "The time left before the battery deactivates")
		.def_readonly("provides", &BatterySystem::provides, "The power the battery can provide")
		.def_readonly("providing", &BatterySystem::providing, "The power the battery is currently providing")
		;

	py::class_<Repairable>(module, "Repairable", "A repairable object")
		.def_readonly("repair_progress", &Repairable::repairProgress, "Progress towards repairing it")
		.def_readonly("position", &Repairable::position, "The position of the object")
		.def_readonly("room", &Repairable::room, "The room it's in")
		.def_readonly("slot", &Repairable::slot, "The slot it's in")
		;

	py::class_<Fire, Repairable>(module, "Fire", "A fire")
		.def_readonly("death_timer", &Fire::deathTimer, "The time left to live for the fire")
		;

	py::class_<Breach, Repairable>(module, "Breach", "A breach")
		;

	py::class_<Slot>(module, "Slot", "A slot in a room")
		.def_readonly("id", &Slot::id, "The id of the slot")
		.def_readonly("rect", &Slot::rect, "The hitbox of the slot")
		.def_readonly("position", &Slot::position, "The position of the slot in the room")
		.def_readonly("occupiable", &Slot::occupiable, "If the slot can be occupied normally")
		.def_readonly("crew_moving", &Slot::crewMoving, "List of crew moving in this slot")
		.def_readonly("crew", &Slot::crew, "The crewmember stationed at this slot")
		.def_readonly("intruder", &Slot::intruder, "The intruder stationed at this slot")
		.def_readonly("fire", &Slot::fire, "The fire at this slot")
		.def_readonly("breach", &Slot::breach, "The breach at this slot")
		;

	py::class_<Room>(module, "Room", "A room in the ship")
		.def_readonly_static("HARDCODED_TILE_SIZE", &Room::HARDCODED_TILE_SIZE, "The size of tiles (at 1280x720 resolution)")
		.def_readonly("system", &Room::system, "The system of the room")
		.def_readonly("id", &Room::id, "The id of the room")
		.def_readonly("primary_slot", &Room::primarySlot, "The primary slot of the room (where it'll be manned)")
		.def_readonly("primary_direction", &Room::primaryDirection, "The direction manning crewmembers will face")
		.def_readonly("rect", &Room::rect, "The hitbox of the room")
		.def_readonly("tiles", &Room::tiles, "The number of tiles in each direction")
		.def_readonly("player", &Room::player, "If the room is owned by the player")
		.def_readonly("stunning", &Room::stunning, "If the room is stunning its inhabitants")
		.def_readonly("oxygen", &Room::oxygen, "The oxygen in the room")
		.def_readonly("hack_level", &Room::hackLevel, "The hacking level")
		.def_readonly("crew_moving", &Room::crewMoving, "List of moving crew in this room")
		.def_readonly("crew", &Room::crew, "Crew stationed in this room")
		.def_readonly("intruders", &Room::intruders, "Intruders stationed in this room")
		.def_readonly("fire_repair", &Room::fireRepair, "Progress of extinguishing fires (1 is equivalent to 1 fire at full health)")
		.def_readonly("breach_repair", &Room::breachRepair, "Progress of patching breaches (1 is equivalent to 1 breach at full health)")
		.def_readonly("slots_occupiable", &Room::slotsOccupiable, "Number of slots that can be occupied normally by crew")
		.def_readonly("slots", &Room::slots, "The number of slots the room has overall")
		.def("slot_at", py::overload_cast<const Point<int>&>(&Room::slotAt, py::const_), "Gets the slot at the specified point", py::return_value_policy::reference)
		.def("slot_id_at", py::overload_cast<const Point<int>&>(&Room::slotIdAt, py::const_), "Gets id of the slot at the specified point")
		;

	py::class_<Door>(module, "Door", "A door in the ship")
		.def_readonly_static("HARDCODED_HEALTH", &Door::HARDCODED_HEALTH, "The health the door has, indexed by difficulty, then door system level")
		.def_readonly("id", &Door::id, "The id of the door")
		.def_readonly("rooms", &Door::rooms, "The rooms the door is adjacent to")
		.def_readonly("level", &Door::level, "The level of the door")
		.def_readonly("health", &Door::health, "The health of the door")
		.def_readonly("hack_level", &Door::hackLevel, "The hacking level")
		.def_readonly("open", &Door::open, "If the door is open")
		.def_readonly("open_fake", &Door::openFake, "If the door is forced open")
		.def_readonly("ioned", &Door::ioned, "If the door is ioned")
		.def_readonly("vertical", &Door::vertical, "If the door is vertical")
		.def_readonly("airlock", &Door::airlock, "If the door connects to space")
		.def_readonly("position", &Door::position, "The position of the door's center")
		.def_readonly("dimensions", &Door::dimensions, "The door's size")
		;

	py::class_<Cargo>(module, "Cargo", "A ship's inventory")
		.def_readonly("scrap", &Cargo::scrap, "The ship's scrap")
		.def_readonly("fuel", &Cargo::fuel, "The ship's fuel count")
		.def_readonly("missiles", &Cargo::missiles, "The ship's missile count")
		.def_readonly("drone_parts", &Cargo::droneParts, "The ship's drone parts")
		.def_readonly("weapons", &Cargo::weapons, "The ship's weapons in storage")
		.def_readonly("drones", &Cargo::drones, "The ship's drones in storage")
		.def_readonly("augments", &Cargo::augments, "The ship's augments")
		;

	py::class_<Reactor>(module, "Reactor", "A ship's reactor")
		.def_readonly("total", &Reactor::total, "Total power left in the reactor")
		.def_readonly("normal", &Reactor::normal, "Normal power left in the reactor")
		.def_readonly("battery", &Reactor::battery, "Battery power left in the reactor")
		.def_readonly("cap", &Reactor::cap, "The reactor's power cap")
		;

	py::class_<Ship>(module, "Ship", "A ship")
		.def_readonly("player", &Ship::player, "If it's a player ship")
		.def_readonly("destroyed", &Ship::destroyed, "If the ship is destroyed")
		.def_readonly("automated", &Ship::automated, "If the ship is automated")
		.def_readonly("jumping", &Ship::jumping, "If the ship is doing an FTL jump")
		.def_readonly("can_jump", &Ship::canJump, "If the ship can do an FTL jump")
		.def_readonly("can_inventory", &Ship::canInventory, "If the ship can open its inventory")
		.def_readonly("jump_timer", &Ship::jumpTimer, "The time until an FTL jump is possible")
		.def_readonly("hull", &Ship::hull, "The ship's hull")
		.def_readonly("super_shields", &Ship::superShields, "The ship's super shield bubbles")
		.def_readonly("evasion", &Ship::evasion, "The ship's evasion")
		.def_readonly("total_oxygen", &Ship::totalOxygen, "The ship's total oxygen")
		.def_readonly("shields", &Ship::shields, "The ship's shield system")
		.def_readonly("engines", &Ship::engines, "The ship's engines system")
		.def_readonly("medbay", &Ship::medbay, "The ship's medbay system")
		.def_readonly("clonebay", &Ship::clonebay, "The ship's clonebay system")
		.def_readonly("oxygen", &Ship::oxygen, "The ship's oxygen system")
		.def_readonly("teleporter", &Ship::teleporter, "The ship's teleporter system")
		.def_readonly("cloaking", &Ship::cloaking, "The ship's cloaking system")
		.def_readonly("artillery", &Ship::artillery, "The list of the ship's artillery systems")
		.def_readonly("mind_control", &Ship::mindControl, "The ship's mind control system")
		.def_readonly("hacking", &Ship::hacking, "The ship's hacking system")
		.def_readonly("weapons", &Ship::weapons, "The ship's weapons system")
		.def_readonly("drones", &Ship::drones, "The ship's drones system")
		.def_readonly("piloting", &Ship::piloting, "The ship's piloting system")
		.def_readonly("sensors", &Ship::sensors, "The ship's sensors system")
		.def_readonly("door_control", &Ship::doorControl, "The ship's door system")
		.def_readonly("battery", &Ship::battery, "The ship's backup battery system")
		.def_readonly("rooms", &Ship::rooms, "The ship's rooms")
		.def_readonly("doors", &Ship::doors, "The ship's doors")
		.def_readonly("cargo", &Ship::cargo, "The ship's inventory")
		;

	py::class_<PauseState>(module, "Pause")
		.def_readonly("any", &PauseState::any, "If the game is paused at all")
		.def_readonly("just_paused", &PauseState::justPaused, "If the game just paused")
		.def_readonly("just_unpaused", &PauseState::justUnpaused, "If the game just unpaused")
		.def_readonly("normal", &PauseState::normal, "If the player paused the game")
		.def_readonly("automatic", &PauseState::automatic, "If the game was automatically paused")
		.def_readonly("menu", &PauseState::menu, "If the game is paused due to a menu being open")
		.def_readonly("event", &PauseState::event, "If an event paused the game")
		.def_readonly("touch", &PauseState::touch, "If the game was paused through touch (not used on PC)")
		;

	py::enum_<ProjectileType>(module, "ProjectileType", "The type of a projectile")
		.value("Invalid", ProjectileType::Invalid)
		.value("Miscellaneous", ProjectileType::Miscellaneous)
		.value("Laser", ProjectileType::Laser)
		.value("Asteroid", ProjectileType::Asteroid)
		.value("Missile", ProjectileType::Missile)
		.value("Bomb", ProjectileType::Bomb)
		.value("Beam", ProjectileType::Beam)
		.value("ABS", ProjectileType::ABS)
		;

	py::class_<Beam>(module, "Beam", "Info for a fired beam")
		.def_readonly("begin", &Beam::begin, "The start point of the beam attack")
		.def_readonly("end", &Beam::end, "The end point of the beam attack")
		.def_readonly("pierced", &Beam::pierced, "If the beam pierced the shields")
		.def_readonly("damaged_super_shield", &Beam::damagedSuperShield, "If the beam damaged a super shield")
		;

	py::class_<Bomb>(module, "Bomb", "Info for a fired bomb")
		.def_readonly("explosion_timer", &Bomb::explosionTimer, "How long until the bomb explodes")
		.def_readonly("damaged_super_shield", &Bomb::damagedSuperShield, "If the bomb damaged a super shield")
		.def_readonly("bypassed_super_shield", &Bomb::bypassedSuperShield, "If the bomb bypassed a super shield")
		;

	py::class_<Projectile>(module, "Projectile", "A projectile")
		.def_readonly("type", &Projectile::type, "The projectile's type")
		.def_readonly("position", &Projectile::position, "The projectile's position")
		.def_readonly("position_last", &Projectile::positionLast, "The projectile's last position")
		.def_readonly("target", &Projectile::target, "The projectile's target point")
		.def_readonly("speed", &Projectile::speed, "The projectile's speed")
		.def_readonly("lifespan", &Projectile::lifespan, "The projectile's lifespan")
		.def_readonly("heading", &Projectile::heading, "The projectile's heading")
		.def_readonly("entry_angle", &Projectile::entryAngle, "The projectile's entry angle")
		.def_readonly("angle", &Projectile::angle, "The projectile's angle")
		.def_readonly("spin_speed", &Projectile::spinSpeed, "The projectile's spin speed")
		.def_readonly("player", &Projectile::player, "If the projectile is player owned")
		.def_readonly("player_space", &Projectile::playerSpace, "If the projectile is in the player space")
		.def_readonly("player_space_is_destination", &Projectile::playerSpaceIsDestination, "If the projectile is headed to the player space")
		.def_readonly("dead", &Projectile::dead, "If the projectile is dead")
		.def_readonly("missed", &Projectile::missed, "If the projectile missed")
		.def_readonly("hit", &Projectile::hit, "If the projectile hit")
		.def_readonly("passed", &Projectile::passed, "If the projectile passed its target")
		.def_readonly("beam", &Projectile::beam, "Beam-specific info")
		.def_readonly("bomb", &Projectile::bomb, "Bomb-specific info")
		;

	py::class_<RandomAmount<int>>(module, "RandomAmountInt", "Used by FTL to generate random integers")
		.def_readonly("min", &RandomAmount<int>::min, "Minimum value")
		.def_readonly("max", &RandomAmount<int>::max, "Maximum value")
		.def_readonly("chance_none", &RandomAmount<int>::chanceNone, "Chance of nothing happening")
		;

	py::class_<RandomAmount<float>>(module, "RandomAmountFloat", "Used by FTL to generate random integers; casted to floating point")
		.def_readonly("min", &RandomAmount<float>::min, "Minimum value")
		.def_readonly("max", &RandomAmount<float>::max, "Maximum value")
		.def_readonly("chance_none", &RandomAmount<float>::chanceNone, "Chance of nothing happening")
		;

	py::class_<AsteroidInfo>(module, "AsteroidInfo", "Info for generating asteroids")
		.def_readonly("spawn_rates", &AsteroidInfo::spawnRates, "The spawn rate for each generator state")
		.def_readonly("state_lengths", &AsteroidInfo::stateLengths, "The length of each generate state")
		.def_readonly("ship_count", &AsteroidInfo::shipCount, "The number of ships at this location")
		.def_readonly("state", &AsteroidInfo::state, "The current generator state")
		.def_readonly("player_space", &AsteroidInfo::playerSpace, "If the asteroid will be in the player space")
		.def_readonly("next_direction", &AsteroidInfo::nextDirection, "Next asteroid direction")
		.def_readonly("state_timer", &AsteroidInfo::stateTimer, "Timer for next state change")
		.def_readonly("timer", &AsteroidInfo::timer, "Timer for next asteroid")
		.def_readonly("running", &AsteroidInfo::running, "If currently spawning asteroids")
		.def_readonly("shield_level", &AsteroidInfo::shieldLevel, "Shield level used to determine spawn rates")
		;

	py::enum_<EnvironmentType>(module, "EnvironmentType", "Type of environment at a location")
		.value("Invalid", EnvironmentType::Invalid)
		.value("Normal", EnvironmentType::Normal)
		.value("Asteroids", EnvironmentType::Asteroids)
		.value("CloseToSun", EnvironmentType::CloseToSun)
		.value("Nebula", EnvironmentType::Nebula)
		.value("IonStorm", EnvironmentType::IonStorm)
		.value("Pulsar", EnvironmentType::Pulsar)
		.value("ASB", EnvironmentType::ASB)
		;

	py::class_<Space>(module, "Space", "Info about what's in space")
		.def_readonly("projectiles", &Space::projectiles, "Projectile list")
		.def_readonly("environment", &Space::environment, "The environment")
		.def_readonly("asteroids", &Space::asteroids, "Asteroid generation (if in asteroid environment)")
		.def_readonly("hazard_timer", &Space::hazardTimer, "Timer until hazard activates (if applicable)")
		;

	py::class_<ResourceEvent>(module, "ResourceEvent", "Resources given by an event")
		.def_readonly("missiles", &ResourceEvent::missiles, "Missiles given")
		.def_readonly("fuel", &ResourceEvent::fuel, "Fuel given")
		.def_readonly("drone_parts", &ResourceEvent::droneParts, "Drone parts given")
		.def_readonly("scrap", &ResourceEvent::scrap, "Scrap given")
		.def_readonly("crew", &ResourceEvent::crew, "Crew added")
		.def_readonly("traitor", &ResourceEvent::traitor, "If there's a traitor")
		.def_readonly("cloneable", &ResourceEvent::cloneable, "If a lost crewmember is cloneable")
		.def_readonly("steal", &ResourceEvent::steal, "If event steals")
		.def_readonly("intruders", &ResourceEvent::intruders, "If event has intruders")
		.def_readonly("weapon", &ResourceEvent::weapon, "Weapon given")
		.def_readonly("drone", &ResourceEvent::augment, "Augment given")
		.def_readonly("crew_type", &ResourceEvent::crewType, "Type of crew spawned/given")
		.def_readonly("fleet_delay", &ResourceEvent::fleetDelay, "Amount fleet is delayed/accelerated")
		.def_readonly("hull_damage", &ResourceEvent::hullDamage, "Amount of hull damage/repair")
		.def_readonly("system", &ResourceEvent::system, "System targeted (?)")
		.def_readonly("upgrade_amount", &ResourceEvent::upgradeAmount, "System upgrade amount")
		.def_readonly("remove_augment", &ResourceEvent::removeAugment, "An item that is removed (afaik only augments)")
		;

	py::class_<BoardingEvent>(module, "BoardingEvent", "Boarders spawned by an event")
		.def_readonly("crew_type", &BoardingEvent::crewType, "Crew type")
		.def_readonly("min", &BoardingEvent::min, "Minimum")
		.def_readonly("max", &BoardingEvent::max, "Maximum")
		.def_readonly("amount", &BoardingEvent::amount, "Actual amount")
		.def_readonly("breach", &BoardingEvent::breach, "If a breach is spawned")
		;

	py::enum_<StoreBoxType>(module, "StoreBoxType", "Type of items at the store")
		.value("Invalid", StoreBoxType::Invalid)
		.value("Weapon", StoreBoxType::Weapon)
		.value("Drone", StoreBoxType::Drone)
		.value("Augment", StoreBoxType::Augment)
		.value("Crew", StoreBoxType::Crew)
		.value("System", StoreBoxType::System)
		.value("Item", StoreBoxType::Item)
		;

	py::class_<StoreBox>(module, "StoreBox", "A box with an item in it at the store")
		.def_readonly("type", &StoreBox::type, "Item type")
		.def_readonly("actual_price", &StoreBox::actualPrice, "The actual price, use this, not the blueprint")
		.def_readonly("id", &StoreBox::id, "The id of the box")
		.def_readonly("page2", &StoreBox::page2, "If the box is on page 2")
		.def_readonly("weapon", &StoreBox::weapon, "The weapon contained (if applicable)")
		.def_readonly("drone", &StoreBox::drone, "The drone contained (if applicable)")
		.def_readonly("augment", &StoreBox::augment, "The augment contained (if applicable)")
		.def_readonly("crew", &StoreBox::crew, "The crew contained (if applicable)")
		.def_readonly("system", &StoreBox::system, "The system contained (if applicable)")
		;

	py::class_<Store>(module, "Store", "A store")
		.def_readonly_static("HARDCODED_BOXES_PER_SECTION", &Store::HARDCODED_BOXES_PER_SECTION, "Store boxes per store section")
		.def_readonly("boxes", &Store::boxes, "Number of boxes")
		.def_readonly("sections", &Store::sections, "Number of sections")
		.def_readonly("fuel", &Store::fuel, "Fuel in stock")
		.def_readonly("fuel_cost", &Store::fuelCost, "Fuel price")
		.def_readonly("missiles", &Store::missiles, "Missiles in stock")
		.def_readonly("missile_cost", &Store::missileCost, "Missile price")
		.def_readonly("drone_parts", &Store::droneParts, "Drone parts in stock")
		.def_readonly("drone_part_cost", &Store::dronePartCost, "Drone part price")
		.def_readonly("repair_cost", &Store::repairCost, "Repair price")
		.def_readonly("repair_cost_full", &Store::repairCostFull, "Price to repair all damage")
		.def_readonly("page2", &Store::page2, "If player is looking at page 2")
		;

	py::class_<EventDamage>(module, "EventDamage", "Damage/status effects from an event")
		.def_readonly("system", &EventDamage::system, "Target system")
		.def_readonly("amount", &EventDamage::amount, "Amount of damage")
		.def_readonly("effect", &EventDamage::effect, "Effect type")
		;

	py::class_<Choice>(module, "Choice", "A choice that can be made at an event")
		.def_property_readonly("event", [](const Choice& o) { return o.event.get(); }, "The event tied to the choice")
		.def_readonly("required_object", &Choice::requiredObject, "A required object to make this choice")
		.def_readonly("level_min", &Choice::levelMin, "Minimum level for this choice (i.e. of systems)")
		.def_readonly("level_max", &Choice::levelMax, "Maximum level for this choice (i.e. of systems)")
		.def_readonly("max_group", &Choice::maxGroup, "Maximum amount of object?")
		.def_readonly("blue", &Choice::blue, "If the choice is a blue option")
		.def_readonly("hidden_reward", &Choice::hiddenReward, "If the choice has hidden rewards")
		;

	py::class_<LocationEvent>(module, "LocationEvent", "Location data for an event")
		.def_readonly("environment", &LocationEvent::environment, "The environment of the location")
		.def_readonly("environment_targets_enemy", &LocationEvent::environmentTargetsEnemy, "If the environment targets the enemy (i.e. ABS)")
		.def_readonly("exit", &LocationEvent::exit, "If at an exit beacon")
		.def_readonly("distress", &LocationEvent::distress, "If at a distress beacon")
		.def_readonly("reveal_map", &LocationEvent::revealMap, "If the map is revealed")
		.def_readonly("repair", &LocationEvent::repair, "If at a repair beacon")
		.def_readonly("unlock_ship", &LocationEvent::unlockShip, "If event unlocks ship")
		.def_readonly("ship", &LocationEvent::ship, "The ship at the event (if applicable)")
		.def_readonly("resources", &LocationEvent::resources, "The resources given at the event")
		.def_readonly("reward", &LocationEvent::reward, "The resources given by defeating a ship at the event")
		.def_readonly("boarders", &LocationEvent::boarders, "The boarders added (if applicable)")
		.def_readonly("store", &LocationEvent::store, "The store (if applicable)")
		.def_readonly("damage", &LocationEvent::damage, "The damage given by the event")
		.def_readonly("choices", &LocationEvent::choices, "The choices for the player")
		;

	py::class_<Game>(module, "Game", "The base game object")
		.def_readonly("just_loaded", &Game::justLoaded, "If the game just loaded")
		.def_readonly("game_over", &Game::gameOver, "If the game is over")
		.def_readonly("just_jumped", &Game::justJumped, "If the player just jumped")
		.def_readonly("pause", &Game::pause, "The pause state")
		.def_readonly("space", &Game::space, "The space state")
		.def_readonly("event", &Game::event, "The current event")
		.def_readonly("player_ship", &Game::playerShip, "The player ship")
		.def_readonly("enemy_ship", &Game::enemyShip, "The enemy ship")
		.def_readonly("player_crew", &Game::playerCrew, "The player crew")
		.def_readonly("enemy_crew", &Game::enemyCrew, "The enemy crew")
		;

	py::enum_<Settings::FullscreenMode>(module, "FullscreenMode", "A fullscreen mode the game can be set to")
		.value("Off", Settings::FullscreenMode::Off, "Windowed")
		.value("Stretch", Settings::FullscreenMode::Stretch, "Borderless window")
		.value("Borders", Settings::FullscreenMode::Borders, "Fullscreen that is not upscaleed")
		.value("Native", Settings::FullscreenMode::Native, "Native fullscreen")
		;

	py::enum_<Settings::Difficulty>(module, "Difficulty", "A difficulty level")
		.value("Easy", Settings::Difficulty::Easy)
		.value("Normal", Settings::Difficulty::Normal)
		.value("Hard", Settings::Difficulty::Hard)
		;

	py::enum_<Settings::EventChoiceSelection>(module, "EventChoiceSelection", "Options for how event choices can be made")
		.value("DisableHotkeys", Settings::EventChoiceSelection::DisableHotkeys)
		.value("NoDelay", Settings::EventChoiceSelection::NoDelay)
		.value("BriefDelay", Settings::EventChoiceSelection::BriefDelay)
		;

	py::class_<Settings>(module, "Settings", "Game settings")
		.def_readonly("fullscreen", &Settings::fullscreen, "The fullscreen mode")
		.def_readonly("sound_volume", &Settings::soundVolume, "The sound volume")
		.def_readonly("music_volume", &Settings::musicVolume, "The music volume")
		.def_readonly("difficulty", &Settings::difficulty, "The current difficulty level")
		.def_readonly("console_enabled", &Settings::consoleEnabled, "If the console is enabled")
		.def_readonly("pause_on_focus_loss", &Settings::pauseOnFocusLoss, "Pause if focus is lost")
		.def_readonly("touch_pause", &Settings::touchPause, "Pause on touch (unused on PC?)")
		.def_readonly("no_dynamic_backgrounds", &Settings::noDynamicBackgrounds, "Lowend mode, no dynamic backgrounds")
		.def_readonly("achievement_popups", &Settings::achievementPopups, "Popups for achievements")
		.def_readonly("vertical_sync", &Settings::verticalSync, "Vertical sync")
		.def_readonly("frame_limit", &Settings::frameLimit, "Frame limit")
		.def_readonly("show_breacon_paths_on_hover", &Settings::showBeaconPathsOnHover, "Show beacon paths on hover")
		.def_readonly("colorblind_mode", &Settings::colorblindMode, "Colorblind mode")
		.def_readonly("advanced_edition_enabled", &Settings::advancedEditionEnabled, "If Advanced Edition is currently enabled")
		.def_readonly("language", &Settings::language, "The current language")
		.def_readonly("screeen_size", &Settings::screenSize, "The resolution of the monitor")
		.def_readonly("event_choice_selection", &Settings::eventChoiceSelection, "How event choices are made")
		.def_readonly("hotkeys", &Settings::hotkeys, "The current hotkeys")
		;

	py::class_<Blueprints>(module, "Blueprints", "Blueprint data")
		.def_readonly("weapons", &Blueprints::weaponBlueprints, "Weapon blueprint dictionary")
		.def_readonly("drones", &Blueprints::droneBlueprints, "Drone blueprint dictionary")
		.def_readonly("augments", &Blueprints::augmentBlueprints, "Augment blueprint dictionary")
		.def_readonly("crew", &Blueprints::crewBlueprints, "Crew blueprint dictionary")
		.def_readonly("systems", &Blueprints::systemBlueprints, "System blueprint dictionary")
		;

	py::class_<State>(module, "State", "The overall game state")
		.def_readonly("running", &State::running, "If the game is running")
		.def_readonly("game", &State::game, "Most game state data is here")
		.def_readonly("settings", &State::settings, "The settings")
		.def_readonly("blueprints", &State::blueprints, "The blueprint data")
		;
}
