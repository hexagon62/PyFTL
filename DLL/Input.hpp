#pragma once

#include "Reader.hpp"

#include <functional>

// Very hacky way of signalling to Windows this is generated by the AI
// ... if the Windows API is needed anyways
#define WM_FTLAI 0x800

enum class MouseButton
{
	None = -1,
	Left, Middle, Right
};

enum class InputDirection
{
	Unchanged = -1,
	Up = 0, Down = 1
};

class Input
{
	class Impl;

public:
	static constexpr int GAME_WIDTH = 1280;
	static constexpr int GAME_HEIGHT = 720;

	struct Ret
	{
		double time = 0.0;
		operator bool() const;
	};

	Input() = delete;

	static void iterate(); // make inputs
	static bool empty(); // check if no inputs are queued
	static bool queued(const Input::Ret& input); // check if an input is queued
	static bool pop(const Input::Ret& input); // dequeue the input, returns false if not in queue
	static bool ready(); // check if ready
	static void setReady(bool ready = true); // sets the ready state
	static void allowHumanMouse(bool allow = true); // sets if human mouse input is allowed
	static void allowHumanKeyboard(bool allow = true); // sets if human keyboard input is allowed
	static bool humanMouseAllowed(); // checks if human mouse input is allowed
	static bool humanKeyboardAllowed(); // checks if human keyboard input is allowed
	static void clear(); // clears the input queue

	// All inputs below are added to a queue, not done immediately
	// This is so they're roughly executed sequentially

	static Ret dummy();

	static Ret mouseMove(const Point<int>& pos);

	static Ret mouseDown(
		MouseButton button = MouseButton::Left,
		const Point<int>& position = { -1, -1 },
		bool shift = false
	);

	static Ret mouseUp(
		MouseButton button = MouseButton::Left,
		const Point<int>& position = { -1, -1 },
		bool shift = false
	);

	static Ret mouseClick(
		MouseButton button = MouseButton::Left,
		const Point<int>& position = { -1, -1 },
		bool shift = false
	);

	static Ret keyDown(Key key, bool shift = false);
	static Ret keyUp(Key key, bool shift = false);
	static Ret keyPress(Key key, bool shift = false);
	static Ret hotkeyDown(const std::string& hotkey, bool shift = false);
	static Ret hotkeyUp(const std::string& hotkey, bool shift = false);
	static Ret hotkeyPress(const std::string& hotkey, bool shift = false);

	static const decltype(Settings::hotkeys)& hotkeys();

	static Ret text(char ch);
	static Ret text(const std::string& str);
	static Ret textConfirm();
	static Ret textClear();
	static Ret textBackspace();
	static Ret textDelete();
	static Ret textLeft();
	static Ret textRight();
	static Ret textHome();
	static Ret textEnd();

	static Ret cheat(const std::string& command);

	static Ret pause(bool on = true);
	static Ret choice(int which);

	static Ret powerSystem(SystemType system, int set = 0);
	static Ret powerWeapon(int weapon, bool on = true);
	static Ret powerDrone(int drone, bool on = true);

	static Ret selectWeapon(int weapon);
	static Ret selectCrew(const std::vector<int>& crew, bool exclusive = true);

	static Ret door(int door, bool open);
	static Ret doorAll(bool open, bool airlocks = false);

	static Ret autofire(bool on = false);

	static Ret aim(int room, bool self);
	static Ret aim(
		int room,
		const Point<int>& start,
		const Point<int>& end
	);

	static Ret quitAiming();
	static Ret deselectCrew();

	static Ret saveStations();
	static Ret loadStations();

private:
	static Impl impl;

	static bool good, humanMouse, humanKeyboard;
};
